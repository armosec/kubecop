apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "..fullname" . }}
  labels:
    {{- include "..labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "..selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        placeholder: "kubecop"
      {{- if .Values.kubecop.prometheusExporter.enabled }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"
      {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "..selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "..serviceAccountName" . }}
      hostPID: true
      hostNetwork: false
      securityContext:
          {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: kubecop
        terminationMessagePolicy: FallbackToLogsOnError
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - --mode-node-agent
        ports:
        - containerPort: 9090
          name: http-metrics
          protocol: TCP
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        resources:
          {{- toYaml .Values.kubecop.resources | nindent 12 }}
        env:
          {{- if .Values.isNamespaced }}
          - name: STORE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          {{- end }}
          {{- if .Values.kubecop.gomemlimit.enabled }}
          - name: GOMEMLIMIT
            value: "{{ .Values.kubecop.gomemlimit.limit }}"
          {{- end }}
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: HOST_ROOT
            value: "/host"
          {{- if .Values.kubecop.alertmanager.enabled  }}
          - name: ALERTMANAGER_URLS
            value: {{ .Values.kubecop.alertmanager.endpoints }}
          {{- end }}
          {{- if .Values.kubecop.httpEndpoint.enabled  }}
          - name: HTTP_ENDPOINT_URL
            value: {{ .Values.kubecop.httpEndpoint.url }}
          {{- end }}
          {{- if .Values.kubecop.syslog.enabled  }}
          - name: SYSLOG_HOST
            value: {{ .Values.kubecop.syslog.endpoint }}
          - name: SYSLOG_PROTOCOL
            value: {{ .Values.kubecop.syslog.protocol }}
          {{- end }}
          {{- if .Values.kubecop.csv.enabled  }}
          - name: EXPORTER_CSV_RULE_PATH
            value: {{ .Values.kubecop.csv.path }}
          - name: EXPORTER_CSV_MALWARE_PATH
            value: {{ .Values.kubecop.csv.malwarePath }}
          {{- end }}
          {{- if .Values.kubecop.pprofserver.enabled  }}
          - name: _PPROF_SERVER
            value: "true"
          {{- end }}
          {{- if not .Values.kubecop.partialProfiles.enabled  }}
          - name: OPEN_IGNORE_MOUNTS
            value: "false"
          - name: OPEN_IGNORE_PREFIXES
            value: ""
          {{- else }}
          - name: OPEN_IGNORE_MOUNTS
            value: "{{ .Values.kubecop.partialProfiles.ignoreMounts }}"
          - name: OPEN_IGNORE_PREFIXES
            value: "{{ .Values.kubecop.partialProfiles.ignorePrefixes }}"
          {{- end }}
          {{- if .Values.clamAV.enabled  }}
          - name: CLAMAV_HOST
            value: "{{ .Values.clamAV.host }}"
          - name: CLAMAV_PORT
            value: "{{ .Values.clamAV.port }}"
          - name: CLAMAV_SCAN_PATH
            value: "{{ .Values.clamAV.path }}"
          - name: CLAMAV_SCAN_INTERVAL
            value: "{{ .Values.clamAV.scanInterval }}"
          {{- end }}
          {{- if .Values.kubecop.recording.samplingInterval  }}
          - name: SAMPLING_INTERVAL
            value: "{{ .Values.kubecop.recording.samplingInterval }}"
          {{- end }}
          {{- if .Values.kubecop.recording.finalizationDuration  }}
          - name: FINALIZATION_DURATION
            value: "{{ .Values.kubecop.recording.finalizationDuration }}"
          {{- end }}
          {{- if .Values.kubecop.recording.finalizationJitter  }}
          - name: FINALIZATION_JITTER
            value: "{{ .Values.kubecop.recording.finalizationJitter }}"
          {{- end }}
        volumeMounts:
        - name: host
          mountPath: /host
        - name: run
          mountPath: /run
        - name: modules
          mountPath: /lib/modules
        - name: debugfs
          mountPath: /sys/kernel/debug
        - name: cgroup
          mountPath: /sys/fs/cgroup
        - name: bpffs
          mountPath: /sys/fs/bpf
    {{- if .Values.clamAV.enabled }}
      - name: clamd
        image: {{ .Values.clamAV.image.repository }}:{{ .Values.clamAV.image.tag }}
        imagePullPolicy: {{ .Values.clamAV.image.pullPolicy }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "echo 'PING' | nc -w 1 localhost 3310 | grep PONG || exit 1"
          initialDelaySeconds: 50
          periodSeconds: 10
        {{- if .Values.clamAV.resources }}
        resources:
          {{- toYaml .Values.clamAV.resources | nindent 12 }}
        {{- end }}
        volumeMounts:
        - name: clamdb
          mountPath: /var/lib/clamav-tmp # This is a temporary filler until we have a mirror of the clamav database.
          readOnly: false
        - name: etc
          mountPath: /etc/clamav
          readOnly: true
        - name: host
          mountPath: /host
          readOnly: true
    {{- end }}
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - name: host
        hostPath:
          path: /
      - name: run
        hostPath:
          path: /run
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup
      - name: modules
        hostPath:
          path: /lib/modules
      - name: bpffs
        hostPath:
          path: /sys/fs/bpf
      - name: debugfs
        hostPath:
          path: /sys/kernel/debug
    {{- if .Values.clamAV.enabled }}
      - name: clamdb
        emptyDir: {}
      - name: etc
        configMap:
          name: {{ include "..fullname" . }}-clamav
          items:
          - key: clamd.conf
            path: clamd.conf
          - key: freshclam.conf
            path: freshclam.conf
    {{- end }}
